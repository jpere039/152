Grammar

    0 $accept: program $end

    1 program: PROGRAM IDENT SEMICOLON block END_PROGRAM

    2 block: declaration SEMICOLON block_pm

    3 block_pm: declaration SEMICOLON block_pm
    4         | BEGIN_PROGRAM statement SEMICOLON statement_pm

    5 statement_pm: statement SEMICOLON statement_pm
    6             | %empty

    7 declaration: IDENT declaration_pm

    8 declaration_pm: COMMA IDENT declaration_pm
    9               | COLON declaration_pm_pm

   10 declaration_pm_pm: INTEGER
   11                  | ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER

   12 statement: var ASSIGN var_pm
   13          | IF bool_exp THEN if_pm
   14          | WHILE bool_exp BEGINLOOP statement SEMICOLON statement_pm ENDLOOP
   15          | DO BEGINLOOP statement SEMICOLON statement_pm ENDLOOP WHILE bool_exp
   16          | READ var var_pm_pm
   17          | WRITE var var_pm_pm
   18          | BREAK
   19          | CONTINUE
   20          | EXIT

   21 var_pm: expression
   22       | bool_exp QUESTION expression COLON expression

   23 var_pm_pm: COMMA var var_pm_pm
   24          | %empty

   25 if_pm: statement SEMICOLON statement_pm if_pm_pm

   26 if_pm_pm: ENDIF
   27         | ELSEIF bool_exp statement SEMICOLON statement_pm if_pm_pm
   28         | ELSE statement SEMICOLON statement_pm ENDIF

   29 bool_exp: relation_and_exp bool_exp_pm

   30 bool_exp_pm: OR relation_and_exp bool_exp_pm
   31            | %empty

   32 relation_and_exp: relation_exp relation_and_exp_pm

   33 relation_and_exp_pm: AND relation_exp relation_and_exp_pm
   34                    | %empty

   35 relation_exp: NOT relation_exp_pm
   36             | relation_exp_pm

   37 relation_exp_pm: expression comp expression
   38                | TRUE
   39                | FALSE
   40                | L_PAREN bool_exp R_PAREN

   41 comp: EQ
   42     | NEQ
   43     | LT
   44     | GT
   45     | LTE
   46     | GTE

   47 expression: multiplicative_exp expression_pm

   48 expression_pm: SUB multiplicative_exp expression_pm
   49              | ADD multiplicative_exp expression_pm
   50              | %empty

   51 multiplicative_exp: term multiplicative_exp_pm

   52 multiplicative_exp_pm: MULT term multiplicative_exp_pm
   53                      | DIV term multiplicative_exp_pm
   54                      | MOD term multiplicative_exp_pm
   55                      | %empty

   56 term: SUB term_pm
   57     | term_pm

   58 term_pm: var
   59        | NUMBER
   60        | L_PAREN expression R_PAREN

   61 var: IDENT var_pm_pm_pm

   62 var_pm_pm_pm: L_BRACKET expression R_BRACKET
   63             | %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 1
BEGIN_PROGRAM (259) 4
END_PROGRAM (260) 1
INTEGER (261) 10 11
ARRAY (262) 11
OF (263) 11
IF (264) 13
THEN (265) 13
ENDIF (266) 26 28
ELSE (267) 28
ELSEIF (268) 27
WHILE (269) 14 15
DO (270) 15
BEGINLOOP (271) 14 15
ENDLOOP (272) 14 15
BREAK (273) 18
CONTINUE (274) 19
EXIT (275) 20
READ (276) 16
WRITE (277) 17
AND (278) 33
OR (279) 30
NOT (280) 35
TRUE (281) 38
FALSE (282) 39
SUB (283) 48 56
ADD (284) 49
MULT (285) 52
DIV (286) 53
MOD (287) 54
EQ (288) 41
NEQ (289) 42
LT (290) 43
GT (291) 44
LTE (292) 45
GTE (293) 46
SEMICOLON (294) 1 2 3 4 5 14 15 25 27 28
COLON (295) 9 22
COMMA (296) 8 23
QUESTION (297) 22
L_BRACKET (298) 11 62
R_BRACKET (299) 11 62
L_PAREN (300) 40 60
R_PAREN (301) 40 60
ASSIGN (302) 12
NUMBER (303) 11 59
IDENT (304) 1 7 8 61


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 1, on right: 0
block (52)
    on left: 2, on right: 1
block_pm (53)
    on left: 3 4, on right: 2 3
statement_pm (54)
    on left: 5 6, on right: 4 5 14 15 25 27 28
declaration (55)
    on left: 7, on right: 2 3
declaration_pm (56)
    on left: 8 9, on right: 7 8
declaration_pm_pm (57)
    on left: 10 11, on right: 9
statement (58)
    on left: 12 13 14 15 16 17 18 19 20, on right: 4 5 14 15 25 27
    28
var_pm (59)
    on left: 21 22, on right: 12
var_pm_pm (60)
    on left: 23 24, on right: 16 17 23
if_pm (61)
    on left: 25, on right: 13
if_pm_pm (62)
    on left: 26 27 28, on right: 25 27
bool_exp (63)
    on left: 29, on right: 13 14 15 22 27 40
bool_exp_pm (64)
    on left: 30 31, on right: 29 30
relation_and_exp (65)
    on left: 32, on right: 29 30
relation_and_exp_pm (66)
    on left: 33 34, on right: 32 33
relation_exp (67)
    on left: 35 36, on right: 32 33
relation_exp_pm (68)
    on left: 37 38 39 40, on right: 35 36
comp (69)
    on left: 41 42 43 44 45 46, on right: 37
expression (70)
    on left: 47, on right: 21 22 37 60 62
expression_pm (71)
    on left: 48 49 50, on right: 47 48 49
multiplicative_exp (72)
    on left: 51, on right: 47 48 49
multiplicative_exp_pm (73)
    on left: 52 53 54 55, on right: 51 52 53 54
term (74)
    on left: 56 57, on right: 51 52 53 54
term_pm (75)
    on left: 58 59 60, on right: 56 57
var (76)
    on left: 61, on right: 12 16 17 23 58
var_pm_pm_pm (77)
    on left: 62 63, on right: 61


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM . IDENT SEMICOLON block END_PROGRAM

    IDENT  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM IDENT . SEMICOLON block END_PROGRAM

    SEMICOLON  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: PROGRAM IDENT SEMICOLON . block END_PROGRAM

    IDENT  shift, and go to state 6

    block        go to state 7
    declaration  go to state 8


State 6

    7 declaration: IDENT . declaration_pm

    COLON  shift, and go to state 9
    COMMA  shift, and go to state 10

    declaration_pm  go to state 11


State 7

    1 program: PROGRAM IDENT SEMICOLON block . END_PROGRAM

    END_PROGRAM  shift, and go to state 12


State 8

    2 block: declaration . SEMICOLON block_pm

    SEMICOLON  shift, and go to state 13


State 9

    9 declaration_pm: COLON . declaration_pm_pm

    INTEGER  shift, and go to state 14
    ARRAY    shift, and go to state 15

    declaration_pm_pm  go to state 16


State 10

    8 declaration_pm: COMMA . IDENT declaration_pm

    IDENT  shift, and go to state 17


State 11

    7 declaration: IDENT declaration_pm .

    $default  reduce using rule 7 (declaration)


State 12

    1 program: PROGRAM IDENT SEMICOLON block END_PROGRAM .

    $default  reduce using rule 1 (program)


State 13

    2 block: declaration SEMICOLON . block_pm

    BEGIN_PROGRAM  shift, and go to state 18
    IDENT          shift, and go to state 6

    block_pm     go to state 19
    declaration  go to state 20


State 14

   10 declaration_pm_pm: INTEGER .

    $default  reduce using rule 10 (declaration_pm_pm)


State 15

   11 declaration_pm_pm: ARRAY . L_BRACKET NUMBER R_BRACKET OF INTEGER

    L_BRACKET  shift, and go to state 21


State 16

    9 declaration_pm: COLON declaration_pm_pm .

    $default  reduce using rule 9 (declaration_pm)


State 17

    8 declaration_pm: COMMA IDENT . declaration_pm

    COLON  shift, and go to state 9
    COMMA  shift, and go to state 10

    declaration_pm  go to state 22


State 18

    4 block_pm: BEGIN_PROGRAM . statement SEMICOLON statement_pm

    IF        shift, and go to state 23
    WHILE     shift, and go to state 24
    DO        shift, and go to state 25
    BREAK     shift, and go to state 26
    CONTINUE  shift, and go to state 27
    EXIT      shift, and go to state 28
    READ      shift, and go to state 29
    WRITE     shift, and go to state 30
    IDENT     shift, and go to state 31

    statement  go to state 32
    var        go to state 33


State 19

    2 block: declaration SEMICOLON block_pm .

    $default  reduce using rule 2 (block)


State 20

    3 block_pm: declaration . SEMICOLON block_pm

    SEMICOLON  shift, and go to state 34


State 21

   11 declaration_pm_pm: ARRAY L_BRACKET . NUMBER R_BRACKET OF INTEGER

    NUMBER  shift, and go to state 35


State 22

    8 declaration_pm: COMMA IDENT declaration_pm .

    $default  reduce using rule 8 (declaration_pm)


State 23

   13 statement: IF . bool_exp THEN if_pm

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 40
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    bool_exp            go to state 42
    relation_and_exp    go to state 43
    relation_exp        go to state 44
    relation_exp_pm     go to state 45
    expression          go to state 46
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 24

   14 statement: WHILE . bool_exp BEGINLOOP statement SEMICOLON statement_pm ENDLOOP

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 40
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    bool_exp            go to state 51
    relation_and_exp    go to state 43
    relation_exp        go to state 44
    relation_exp_pm     go to state 45
    expression          go to state 46
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 25

   15 statement: DO . BEGINLOOP statement SEMICOLON statement_pm ENDLOOP WHILE bool_exp

    BEGINLOOP  shift, and go to state 52


State 26

   18 statement: BREAK .

    $default  reduce using rule 18 (statement)


State 27

   19 statement: CONTINUE .

    $default  reduce using rule 19 (statement)


State 28

   20 statement: EXIT .

    $default  reduce using rule 20 (statement)


State 29

   16 statement: READ . var var_pm_pm

    IDENT  shift, and go to state 31

    var  go to state 53


State 30

   17 statement: WRITE . var var_pm_pm

    IDENT  shift, and go to state 31

    var  go to state 54


State 31

   61 var: IDENT . var_pm_pm_pm

    L_BRACKET  shift, and go to state 55

    $default  reduce using rule 63 (var_pm_pm_pm)

    var_pm_pm_pm  go to state 56


State 32

    4 block_pm: BEGIN_PROGRAM statement . SEMICOLON statement_pm

    SEMICOLON  shift, and go to state 57


State 33

   12 statement: var . ASSIGN var_pm

    ASSIGN  shift, and go to state 58


State 34

    3 block_pm: declaration SEMICOLON . block_pm

    BEGIN_PROGRAM  shift, and go to state 18
    IDENT          shift, and go to state 6

    block_pm     go to state 59
    declaration  go to state 20


State 35

   11 declaration_pm_pm: ARRAY L_BRACKET NUMBER . R_BRACKET OF INTEGER

    R_BRACKET  shift, and go to state 60


State 36

   35 relation_exp: NOT . relation_exp_pm

    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 40
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    relation_exp_pm     go to state 61
    expression          go to state 46
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 37

   38 relation_exp_pm: TRUE .

    $default  reduce using rule 38 (relation_exp_pm)


State 38

   39 relation_exp_pm: FALSE .

    $default  reduce using rule 39 (relation_exp_pm)


State 39

   56 term: SUB . term_pm

    L_PAREN  shift, and go to state 62
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    term_pm  go to state 63
    var      go to state 50


State 40

   40 relation_exp_pm: L_PAREN . bool_exp R_PAREN
   60 term_pm: L_PAREN . expression R_PAREN

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 40
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    bool_exp            go to state 64
    relation_and_exp    go to state 43
    relation_exp        go to state 44
    relation_exp_pm     go to state 45
    expression          go to state 65
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 41

   59 term_pm: NUMBER .

    $default  reduce using rule 59 (term_pm)


State 42

   13 statement: IF bool_exp . THEN if_pm

    THEN  shift, and go to state 66


State 43

   29 bool_exp: relation_and_exp . bool_exp_pm

    OR  shift, and go to state 67

    $default  reduce using rule 31 (bool_exp_pm)

    bool_exp_pm  go to state 68


State 44

   32 relation_and_exp: relation_exp . relation_and_exp_pm

    AND  shift, and go to state 69

    $default  reduce using rule 34 (relation_and_exp_pm)

    relation_and_exp_pm  go to state 70


State 45

   36 relation_exp: relation_exp_pm .

    $default  reduce using rule 36 (relation_exp)


State 46

   37 relation_exp_pm: expression . comp expression

    EQ   shift, and go to state 71
    NEQ  shift, and go to state 72
    LT   shift, and go to state 73
    GT   shift, and go to state 74
    LTE  shift, and go to state 75
    GTE  shift, and go to state 76

    comp  go to state 77


State 47

   47 expression: multiplicative_exp . expression_pm

    SUB  shift, and go to state 78
    ADD  shift, and go to state 79

    $default  reduce using rule 50 (expression_pm)

    expression_pm  go to state 80


State 48

   51 multiplicative_exp: term . multiplicative_exp_pm

    MULT  shift, and go to state 81
    DIV   shift, and go to state 82
    MOD   shift, and go to state 83

    $default  reduce using rule 55 (multiplicative_exp_pm)

    multiplicative_exp_pm  go to state 84


State 49

   57 term: term_pm .

    $default  reduce using rule 57 (term)


State 50

   58 term_pm: var .

    $default  reduce using rule 58 (term_pm)


State 51

   14 statement: WHILE bool_exp . BEGINLOOP statement SEMICOLON statement_pm ENDLOOP

    BEGINLOOP  shift, and go to state 85


State 52

   15 statement: DO BEGINLOOP . statement SEMICOLON statement_pm ENDLOOP WHILE bool_exp

    IF        shift, and go to state 23
    WHILE     shift, and go to state 24
    DO        shift, and go to state 25
    BREAK     shift, and go to state 26
    CONTINUE  shift, and go to state 27
    EXIT      shift, and go to state 28
    READ      shift, and go to state 29
    WRITE     shift, and go to state 30
    IDENT     shift, and go to state 31

    statement  go to state 86
    var        go to state 33


State 53

   16 statement: READ var . var_pm_pm

    COMMA  shift, and go to state 87

    $default  reduce using rule 24 (var_pm_pm)

    var_pm_pm  go to state 88


State 54

   17 statement: WRITE var . var_pm_pm

    COMMA  shift, and go to state 87

    $default  reduce using rule 24 (var_pm_pm)

    var_pm_pm  go to state 89


State 55

   62 var_pm_pm_pm: L_BRACKET . expression R_BRACKET

    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 62
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    expression          go to state 90
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 56

   61 var: IDENT var_pm_pm_pm .

    $default  reduce using rule 61 (var)


State 57

    4 block_pm: BEGIN_PROGRAM statement SEMICOLON . statement_pm

    IF        shift, and go to state 23
    WHILE     shift, and go to state 24
    DO        shift, and go to state 25
    BREAK     shift, and go to state 26
    CONTINUE  shift, and go to state 27
    EXIT      shift, and go to state 28
    READ      shift, and go to state 29
    WRITE     shift, and go to state 30
    IDENT     shift, and go to state 31

    $default  reduce using rule 6 (statement_pm)

    statement_pm  go to state 91
    statement     go to state 92
    var           go to state 33


State 58

   12 statement: var ASSIGN . var_pm

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 40
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    var_pm              go to state 93
    bool_exp            go to state 94
    relation_and_exp    go to state 43
    relation_exp        go to state 44
    relation_exp_pm     go to state 45
    expression          go to state 95
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 59

    3 block_pm: declaration SEMICOLON block_pm .

    $default  reduce using rule 3 (block_pm)


State 60

   11 declaration_pm_pm: ARRAY L_BRACKET NUMBER R_BRACKET . OF INTEGER

    OF  shift, and go to state 96


State 61

   35 relation_exp: NOT relation_exp_pm .

    $default  reduce using rule 35 (relation_exp)


State 62

   60 term_pm: L_PAREN . expression R_PAREN

    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 62
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    expression          go to state 97
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 63

   56 term: SUB term_pm .

    $default  reduce using rule 56 (term)


State 64

   40 relation_exp_pm: L_PAREN bool_exp . R_PAREN

    R_PAREN  shift, and go to state 98


State 65

   37 relation_exp_pm: expression . comp expression
   60 term_pm: L_PAREN expression . R_PAREN

    EQ       shift, and go to state 71
    NEQ      shift, and go to state 72
    LT       shift, and go to state 73
    GT       shift, and go to state 74
    LTE      shift, and go to state 75
    GTE      shift, and go to state 76
    R_PAREN  shift, and go to state 99

    comp  go to state 77


State 66

   13 statement: IF bool_exp THEN . if_pm

    IF        shift, and go to state 23
    WHILE     shift, and go to state 24
    DO        shift, and go to state 25
    BREAK     shift, and go to state 26
    CONTINUE  shift, and go to state 27
    EXIT      shift, and go to state 28
    READ      shift, and go to state 29
    WRITE     shift, and go to state 30
    IDENT     shift, and go to state 31

    statement  go to state 100
    if_pm      go to state 101
    var        go to state 33


State 67

   30 bool_exp_pm: OR . relation_and_exp bool_exp_pm

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 40
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    relation_and_exp    go to state 102
    relation_exp        go to state 44
    relation_exp_pm     go to state 45
    expression          go to state 46
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 68

   29 bool_exp: relation_and_exp bool_exp_pm .

    $default  reduce using rule 29 (bool_exp)


State 69

   33 relation_and_exp_pm: AND . relation_exp relation_and_exp_pm

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 40
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    relation_exp        go to state 103
    relation_exp_pm     go to state 45
    expression          go to state 46
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 70

   32 relation_and_exp: relation_exp relation_and_exp_pm .

    $default  reduce using rule 32 (relation_and_exp)


State 71

   41 comp: EQ .

    $default  reduce using rule 41 (comp)


State 72

   42 comp: NEQ .

    $default  reduce using rule 42 (comp)


State 73

   43 comp: LT .

    $default  reduce using rule 43 (comp)


State 74

   44 comp: GT .

    $default  reduce using rule 44 (comp)


State 75

   45 comp: LTE .

    $default  reduce using rule 45 (comp)


State 76

   46 comp: GTE .

    $default  reduce using rule 46 (comp)


State 77

   37 relation_exp_pm: expression comp . expression

    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 62
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    expression          go to state 104
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 78

   48 expression_pm: SUB . multiplicative_exp expression_pm

    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 62
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    multiplicative_exp  go to state 105
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 79

   49 expression_pm: ADD . multiplicative_exp expression_pm

    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 62
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    multiplicative_exp  go to state 106
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 80

   47 expression: multiplicative_exp expression_pm .

    $default  reduce using rule 47 (expression)


State 81

   52 multiplicative_exp_pm: MULT . term multiplicative_exp_pm

    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 62
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    term     go to state 107
    term_pm  go to state 49
    var      go to state 50


State 82

   53 multiplicative_exp_pm: DIV . term multiplicative_exp_pm

    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 62
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    term     go to state 108
    term_pm  go to state 49
    var      go to state 50


State 83

   54 multiplicative_exp_pm: MOD . term multiplicative_exp_pm

    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 62
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    term     go to state 109
    term_pm  go to state 49
    var      go to state 50


State 84

   51 multiplicative_exp: term multiplicative_exp_pm .

    $default  reduce using rule 51 (multiplicative_exp)


State 85

   14 statement: WHILE bool_exp BEGINLOOP . statement SEMICOLON statement_pm ENDLOOP

    IF        shift, and go to state 23
    WHILE     shift, and go to state 24
    DO        shift, and go to state 25
    BREAK     shift, and go to state 26
    CONTINUE  shift, and go to state 27
    EXIT      shift, and go to state 28
    READ      shift, and go to state 29
    WRITE     shift, and go to state 30
    IDENT     shift, and go to state 31

    statement  go to state 110
    var        go to state 33


State 86

   15 statement: DO BEGINLOOP statement . SEMICOLON statement_pm ENDLOOP WHILE bool_exp

    SEMICOLON  shift, and go to state 111


State 87

   23 var_pm_pm: COMMA . var var_pm_pm

    IDENT  shift, and go to state 31

    var  go to state 112


State 88

   16 statement: READ var var_pm_pm .

    $default  reduce using rule 16 (statement)


State 89

   17 statement: WRITE var var_pm_pm .

    $default  reduce using rule 17 (statement)


State 90

   62 var_pm_pm_pm: L_BRACKET expression . R_BRACKET

    R_BRACKET  shift, and go to state 113


State 91

    4 block_pm: BEGIN_PROGRAM statement SEMICOLON statement_pm .

    $default  reduce using rule 4 (block_pm)


State 92

    5 statement_pm: statement . SEMICOLON statement_pm

    SEMICOLON  shift, and go to state 114


State 93

   12 statement: var ASSIGN var_pm .

    $default  reduce using rule 12 (statement)


State 94

   22 var_pm: bool_exp . QUESTION expression COLON expression

    QUESTION  shift, and go to state 115


State 95

   21 var_pm: expression .
   37 relation_exp_pm: expression . comp expression

    EQ   shift, and go to state 71
    NEQ  shift, and go to state 72
    LT   shift, and go to state 73
    GT   shift, and go to state 74
    LTE  shift, and go to state 75
    GTE  shift, and go to state 76

    $default  reduce using rule 21 (var_pm)

    comp  go to state 77


State 96

   11 declaration_pm_pm: ARRAY L_BRACKET NUMBER R_BRACKET OF . INTEGER

    INTEGER  shift, and go to state 116


State 97

   60 term_pm: L_PAREN expression . R_PAREN

    R_PAREN  shift, and go to state 99


State 98

   40 relation_exp_pm: L_PAREN bool_exp R_PAREN .

    $default  reduce using rule 40 (relation_exp_pm)


State 99

   60 term_pm: L_PAREN expression R_PAREN .

    $default  reduce using rule 60 (term_pm)


State 100

   25 if_pm: statement . SEMICOLON statement_pm if_pm_pm

    SEMICOLON  shift, and go to state 117


State 101

   13 statement: IF bool_exp THEN if_pm .

    $default  reduce using rule 13 (statement)


State 102

   30 bool_exp_pm: OR relation_and_exp . bool_exp_pm

    OR  shift, and go to state 67

    $default  reduce using rule 31 (bool_exp_pm)

    bool_exp_pm  go to state 118


State 103

   33 relation_and_exp_pm: AND relation_exp . relation_and_exp_pm

    AND  shift, and go to state 69

    $default  reduce using rule 34 (relation_and_exp_pm)

    relation_and_exp_pm  go to state 119


State 104

   37 relation_exp_pm: expression comp expression .

    $default  reduce using rule 37 (relation_exp_pm)


State 105

   48 expression_pm: SUB multiplicative_exp . expression_pm

    SUB  shift, and go to state 78
    ADD  shift, and go to state 79

    $default  reduce using rule 50 (expression_pm)

    expression_pm  go to state 120


State 106

   49 expression_pm: ADD multiplicative_exp . expression_pm

    SUB  shift, and go to state 78
    ADD  shift, and go to state 79

    $default  reduce using rule 50 (expression_pm)

    expression_pm  go to state 121


State 107

   52 multiplicative_exp_pm: MULT term . multiplicative_exp_pm

    MULT  shift, and go to state 81
    DIV   shift, and go to state 82
    MOD   shift, and go to state 83

    $default  reduce using rule 55 (multiplicative_exp_pm)

    multiplicative_exp_pm  go to state 122


State 108

   53 multiplicative_exp_pm: DIV term . multiplicative_exp_pm

    MULT  shift, and go to state 81
    DIV   shift, and go to state 82
    MOD   shift, and go to state 83

    $default  reduce using rule 55 (multiplicative_exp_pm)

    multiplicative_exp_pm  go to state 123


State 109

   54 multiplicative_exp_pm: MOD term . multiplicative_exp_pm

    MULT  shift, and go to state 81
    DIV   shift, and go to state 82
    MOD   shift, and go to state 83

    $default  reduce using rule 55 (multiplicative_exp_pm)

    multiplicative_exp_pm  go to state 124


State 110

   14 statement: WHILE bool_exp BEGINLOOP statement . SEMICOLON statement_pm ENDLOOP

    SEMICOLON  shift, and go to state 125


State 111

   15 statement: DO BEGINLOOP statement SEMICOLON . statement_pm ENDLOOP WHILE bool_exp

    IF        shift, and go to state 23
    WHILE     shift, and go to state 24
    DO        shift, and go to state 25
    BREAK     shift, and go to state 26
    CONTINUE  shift, and go to state 27
    EXIT      shift, and go to state 28
    READ      shift, and go to state 29
    WRITE     shift, and go to state 30
    IDENT     shift, and go to state 31

    $default  reduce using rule 6 (statement_pm)

    statement_pm  go to state 126
    statement     go to state 92
    var           go to state 33


State 112

   23 var_pm_pm: COMMA var . var_pm_pm

    COMMA  shift, and go to state 87

    $default  reduce using rule 24 (var_pm_pm)

    var_pm_pm  go to state 127


State 113

   62 var_pm_pm_pm: L_BRACKET expression R_BRACKET .

    $default  reduce using rule 62 (var_pm_pm_pm)


State 114

    5 statement_pm: statement SEMICOLON . statement_pm

    IF        shift, and go to state 23
    WHILE     shift, and go to state 24
    DO        shift, and go to state 25
    BREAK     shift, and go to state 26
    CONTINUE  shift, and go to state 27
    EXIT      shift, and go to state 28
    READ      shift, and go to state 29
    WRITE     shift, and go to state 30
    IDENT     shift, and go to state 31

    $default  reduce using rule 6 (statement_pm)

    statement_pm  go to state 128
    statement     go to state 92
    var           go to state 33


State 115

   22 var_pm: bool_exp QUESTION . expression COLON expression

    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 62
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    expression          go to state 129
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 116

   11 declaration_pm_pm: ARRAY L_BRACKET NUMBER R_BRACKET OF INTEGER .

    $default  reduce using rule 11 (declaration_pm_pm)


State 117

   25 if_pm: statement SEMICOLON . statement_pm if_pm_pm

    IF        shift, and go to state 23
    WHILE     shift, and go to state 24
    DO        shift, and go to state 25
    BREAK     shift, and go to state 26
    CONTINUE  shift, and go to state 27
    EXIT      shift, and go to state 28
    READ      shift, and go to state 29
    WRITE     shift, and go to state 30
    IDENT     shift, and go to state 31

    $default  reduce using rule 6 (statement_pm)

    statement_pm  go to state 130
    statement     go to state 92
    var           go to state 33


State 118

   30 bool_exp_pm: OR relation_and_exp bool_exp_pm .

    $default  reduce using rule 30 (bool_exp_pm)


State 119

   33 relation_and_exp_pm: AND relation_exp relation_and_exp_pm .

    $default  reduce using rule 33 (relation_and_exp_pm)


State 120

   48 expression_pm: SUB multiplicative_exp expression_pm .

    $default  reduce using rule 48 (expression_pm)


State 121

   49 expression_pm: ADD multiplicative_exp expression_pm .

    $default  reduce using rule 49 (expression_pm)


State 122

   52 multiplicative_exp_pm: MULT term multiplicative_exp_pm .

    $default  reduce using rule 52 (multiplicative_exp_pm)


State 123

   53 multiplicative_exp_pm: DIV term multiplicative_exp_pm .

    $default  reduce using rule 53 (multiplicative_exp_pm)


State 124

   54 multiplicative_exp_pm: MOD term multiplicative_exp_pm .

    $default  reduce using rule 54 (multiplicative_exp_pm)


State 125

   14 statement: WHILE bool_exp BEGINLOOP statement SEMICOLON . statement_pm ENDLOOP

    IF        shift, and go to state 23
    WHILE     shift, and go to state 24
    DO        shift, and go to state 25
    BREAK     shift, and go to state 26
    CONTINUE  shift, and go to state 27
    EXIT      shift, and go to state 28
    READ      shift, and go to state 29
    WRITE     shift, and go to state 30
    IDENT     shift, and go to state 31

    $default  reduce using rule 6 (statement_pm)

    statement_pm  go to state 131
    statement     go to state 92
    var           go to state 33


State 126

   15 statement: DO BEGINLOOP statement SEMICOLON statement_pm . ENDLOOP WHILE bool_exp

    ENDLOOP  shift, and go to state 132


State 127

   23 var_pm_pm: COMMA var var_pm_pm .

    $default  reduce using rule 23 (var_pm_pm)


State 128

    5 statement_pm: statement SEMICOLON statement_pm .

    $default  reduce using rule 5 (statement_pm)


State 129

   22 var_pm: bool_exp QUESTION expression . COLON expression

    COLON  shift, and go to state 133


State 130

   25 if_pm: statement SEMICOLON statement_pm . if_pm_pm

    ENDIF   shift, and go to state 134
    ELSE    shift, and go to state 135
    ELSEIF  shift, and go to state 136

    if_pm_pm  go to state 137


State 131

   14 statement: WHILE bool_exp BEGINLOOP statement SEMICOLON statement_pm . ENDLOOP

    ENDLOOP  shift, and go to state 138


State 132

   15 statement: DO BEGINLOOP statement SEMICOLON statement_pm ENDLOOP . WHILE bool_exp

    WHILE  shift, and go to state 139


State 133

   22 var_pm: bool_exp QUESTION expression COLON . expression

    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 62
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    expression          go to state 140
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 134

   26 if_pm_pm: ENDIF .

    $default  reduce using rule 26 (if_pm_pm)


State 135

   28 if_pm_pm: ELSE . statement SEMICOLON statement_pm ENDIF

    IF        shift, and go to state 23
    WHILE     shift, and go to state 24
    DO        shift, and go to state 25
    BREAK     shift, and go to state 26
    CONTINUE  shift, and go to state 27
    EXIT      shift, and go to state 28
    READ      shift, and go to state 29
    WRITE     shift, and go to state 30
    IDENT     shift, and go to state 31

    statement  go to state 141
    var        go to state 33


State 136

   27 if_pm_pm: ELSEIF . bool_exp statement SEMICOLON statement_pm if_pm_pm

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 40
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    bool_exp            go to state 142
    relation_and_exp    go to state 43
    relation_exp        go to state 44
    relation_exp_pm     go to state 45
    expression          go to state 46
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 137

   25 if_pm: statement SEMICOLON statement_pm if_pm_pm .

    $default  reduce using rule 25 (if_pm)


State 138

   14 statement: WHILE bool_exp BEGINLOOP statement SEMICOLON statement_pm ENDLOOP .

    $default  reduce using rule 14 (statement)


State 139

   15 statement: DO BEGINLOOP statement SEMICOLON statement_pm ENDLOOP WHILE . bool_exp

    NOT      shift, and go to state 36
    TRUE     shift, and go to state 37
    FALSE    shift, and go to state 38
    SUB      shift, and go to state 39
    L_PAREN  shift, and go to state 40
    NUMBER   shift, and go to state 41
    IDENT    shift, and go to state 31

    bool_exp            go to state 143
    relation_and_exp    go to state 43
    relation_exp        go to state 44
    relation_exp_pm     go to state 45
    expression          go to state 46
    multiplicative_exp  go to state 47
    term                go to state 48
    term_pm             go to state 49
    var                 go to state 50


State 140

   22 var_pm: bool_exp QUESTION expression COLON expression .

    $default  reduce using rule 22 (var_pm)


State 141

   28 if_pm_pm: ELSE statement . SEMICOLON statement_pm ENDIF

    SEMICOLON  shift, and go to state 144


State 142

   27 if_pm_pm: ELSEIF bool_exp . statement SEMICOLON statement_pm if_pm_pm

    IF        shift, and go to state 23
    WHILE     shift, and go to state 24
    DO        shift, and go to state 25
    BREAK     shift, and go to state 26
    CONTINUE  shift, and go to state 27
    EXIT      shift, and go to state 28
    READ      shift, and go to state 29
    WRITE     shift, and go to state 30
    IDENT     shift, and go to state 31

    statement  go to state 145
    var        go to state 33


State 143

   15 statement: DO BEGINLOOP statement SEMICOLON statement_pm ENDLOOP WHILE bool_exp .

    $default  reduce using rule 15 (statement)


State 144

   28 if_pm_pm: ELSE statement SEMICOLON . statement_pm ENDIF

    IF        shift, and go to state 23
    WHILE     shift, and go to state 24
    DO        shift, and go to state 25
    BREAK     shift, and go to state 26
    CONTINUE  shift, and go to state 27
    EXIT      shift, and go to state 28
    READ      shift, and go to state 29
    WRITE     shift, and go to state 30
    IDENT     shift, and go to state 31

    $default  reduce using rule 6 (statement_pm)

    statement_pm  go to state 146
    statement     go to state 92
    var           go to state 33


State 145

   27 if_pm_pm: ELSEIF bool_exp statement . SEMICOLON statement_pm if_pm_pm

    SEMICOLON  shift, and go to state 147


State 146

   28 if_pm_pm: ELSE statement SEMICOLON statement_pm . ENDIF

    ENDIF  shift, and go to state 148


State 147

   27 if_pm_pm: ELSEIF bool_exp statement SEMICOLON . statement_pm if_pm_pm

    IF        shift, and go to state 23
    WHILE     shift, and go to state 24
    DO        shift, and go to state 25
    BREAK     shift, and go to state 26
    CONTINUE  shift, and go to state 27
    EXIT      shift, and go to state 28
    READ      shift, and go to state 29
    WRITE     shift, and go to state 30
    IDENT     shift, and go to state 31

    $default  reduce using rule 6 (statement_pm)

    statement_pm  go to state 149
    statement     go to state 92
    var           go to state 33


State 148

   28 if_pm_pm: ELSE statement SEMICOLON statement_pm ENDIF .

    $default  reduce using rule 28 (if_pm_pm)


State 149

   27 if_pm_pm: ELSEIF bool_exp statement SEMICOLON statement_pm . if_pm_pm

    ENDIF   shift, and go to state 134
    ELSE    shift, and go to state 135
    ELSEIF  shift, and go to state 136

    if_pm_pm  go to state 150


State 150

   27 if_pm_pm: ELSEIF bool_exp statement SEMICOLON statement_pm if_pm_pm .

    $default  reduce using rule 27 (if_pm_pm)
